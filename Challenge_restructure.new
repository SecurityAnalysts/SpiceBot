import sopel
from sopel import module, tools
import random
import os
from os.path import exists
from random import randint
import time

moduledir = os.path.dirname(__file__)
relativepath = "data/weapons.txt"
weaponslocker = os.path.join(moduledir, relativepath)

TIMEOUT = 180
TIMEOUTB = 60
TIMEOUTC = 30

## React to /me (ACTION) challenges
@module.rule('^(?:challenges|(?:fi(?:ght|te)|duel)s(?:\s+with)?)\s+([a-zA-Z0-9\[\]\\`_\^\{\|\}-]{1,32}).*')
@module.intent('ACTION')
@module.require_chanmsg
def challenge_action(bot, trigger):
    return challenge(bot, trigger.sender, trigger.nick, trigger.group(1))

####################
## Main Operation ##
####################

@sopel.module.commands('challenge','duel')
@module.require_chanmsg
def challenge_cmd(bot, trigger):
    return challenge(bot, trigger.sender, trigger.nick, trigger.group(3) or '')

def challenge(bot, channel, instigator, target):
    target = tools.Identifier(target or '')
    if not target:
        bot.say(instigator + ", Who did you want to fight?")
    else:
        
        ## Don't allow chat spamming
        instigatortime = get_timesince(bot, instigator)
        targettime = get_timesince(bot, target)
####### add channel time
        
        ## People can opt out of playing
        instigatordisenable = get_challengestatus(bot, instigator)
        targetdisenable = get_challengestatus(bot, target)
        
        ## Non-Duel Interactions
        if target == bot.nick:
            bot.say("I refuse to fight a biological entity!")
        elif target == instigator:
            bot.say("If you are feeling self-destructive, there are places you can call.")
        elif target.lower() not in bot.privileges[channel.lower()]:
            bot.say("I'm not sure who that is.")
        
        ## Check Opt-in Status
        elif instigatordisenable:
            bot.say(instigator + ', It looks like you have disabled Challenges. Run .challengeon to re-enable.')
        elif targetdisenable:
            bot.say(instigator + ', It looks like ' + target + ' has disabled Challenges.')
        
        ## Enforce Timeout, unless in dev-channel
        elif instigatortime < TIMEOUT and not bot.nick.endswith('dev'):
            bot.notice("You can't challenge for %d seconds." % (TIMEOUT - instigatortime), instigator)
            elif targettime < TIMEOUT:
                bot.notice(target + " can't challenge for %d seconds." % (TIMEOUT - targettime), instigator)
        elif targettime < TIMEOUT and not bot.nick.endswith('dev'):
            bot.notice(target + " can't challenge for %d seconds." % (TIMEOUT - targettime), instigator)
####### add channel timeout
        
        ## If target and intigator pass the criteria above continue
        else:
        
            ## Announce Combat
            bot.say(instigator + " versus " + target)
            
############## Random Inventory gain,,,, right now just healthpotions
            randominventoryfind = randominventory()
            if randominventoryfind == 'true':
                loot, loot_text = determineloottype()
                bot.say(instigator + ' found a ' + str(loot) + ' ' + str(loot_text))

            





#############
## Opt Out ##
#############

## Enable
@module.require_chanmsg
@module.commands('challengeon','duelon')
def challengeon(bot, trigger):
    target = trigger.group(3) or trigger.nick
    if not trigger.admin and target != trigger.nick:
        bot.say("Only bot admins can mark other users as able to challenge.")
    else:
        disenable = get_challengestatus(bot, target)
        if disenable:
            bot.db.set_nick_value(target, 'challenges_disenable', '')
            bot.say('Challenges has been enabled for ' + target)
        else:
            bot.say('Challenges are already enabled for ' + target)

## Disable
@module.require_chanmsg
@module.commands('challengeoff','dueloff')
def challengeoff(bot, trigger):
    target = trigger.group(3) or trigger.nick
    if not trigger.admin and target != trigger.nick:
        bot.say("Only bot admins can mark other users as not able to challenge.")
    else:
        disenable = get_challengestatus(bot, target)
        if disenable:
            bot.say('Challenges are already disabled for ' + target)
        else:
            bot.db.set_nick_value(target, 'challenges_disenable', 'true')
            bot.say('Challenges has been disabled for ' + target)

## Check Status of Opt In
def get_challengestatus(bot, nick):
    disenable = bot.db.get_nick_value(nick, 'challenges_disenable') or 0
    return disenable




##########
## Time ##
##########

def get_timesince(bot, nick):
    now = time.time()
    last = bot.db.get_nick_value(nick, 'challenge_last') or 0
    return abs(now - last)

###############
## Inventory ##
###############

## maybe add a dice roll later
def randominventory():
    randomfindchance = randint(1, 120)
    if randomfindchance >= 90:
        randominventoryfind = 'true'
    else:
        randominventoryfind = 'false'
    return randominventoryfind

def determineloottype():
typesofloot  = ["healthpotion","healthpotion","healthpotion","healthpotion","healthpotion"]
    loot = random.randint(0,len(typesofloot) - 1)
    loot = str(typesofloot [loot])
    loot_text = ''
    if loot == 'healthpotion':
        addhealthpotion(bot, instigator)
        loot_text = ' worth 100 health. Use .challengehealthpotion to consume.'
    return loot, loot_text

def get_healthpotions(bot, nick):
    healthpotions = bot.db.get_nick_value(nick, 'challenges_healthpotions') or 0
    return healthpotions

def addhealthpotion(bot, nick):
    healthpotions = get_healthpotions(bot, nick)
    bot.db.set_nick_value(nick, 'challenges_healthpotions', int(healthpotions) + 1)





